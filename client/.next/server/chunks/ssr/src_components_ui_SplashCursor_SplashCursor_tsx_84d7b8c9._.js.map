{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/samk/Desktop/binary/client/src/components/ui/SplashCursor/SplashCursor.tsx"],"sourcesContent":["\"use client\";\nimport React, { useEffect, useRef } from \"react\";\n\ninterface ColorRGB {\n  r: number;\n  g: number;\n  b: number;\n}\n\ninterface SplashCursorProps {\n  SIM_RESOLUTION?: number;\n  DYE_RESOLUTION?: number;\n  CAPTURE_RESOLUTION?: number;\n  DENSITY_DISSIPATION?: number;\n  VELOCITY_DISSIPATION?: number;\n  PRESSURE?: number;\n  PRESSURE_ITERATIONS?: number;\n  CURL?: number;\n  SPLAT_RADIUS?: number;\n  SPLAT_FORCE?: number;\n  SHADING?: boolean;\n  COLOR_UPDATE_SPEED?: number;\n  BACK_COLOR?: ColorRGB;\n  TRANSPARENT?: boolean;\n}\n\ninterface Pointer {\n  id: number;\n  texcoordX: number;\n  texcoordY: number;\n  prevTexcoordX: number;\n  prevTexcoordY: number;\n  deltaX: number;\n  deltaY: number;\n  down: boolean;\n  moved: boolean;\n  color: ColorRGB;\n}\n\nfunction pointerPrototype(): Pointer {\n  return {\n    id: -1,\n    texcoordX: 0,\n    texcoordY: 0,\n    prevTexcoordX: 0,\n    prevTexcoordY: 0,\n    deltaX: 0,\n    deltaY: 0,\n    down: false,\n    moved: false,\n    color: { r: 0, g: 0, b: 0 },\n  };\n}\n\nexport default function SplashCursor({\n  SIM_RESOLUTION = 128,\n  DYE_RESOLUTION = 1440,\n  CAPTURE_RESOLUTION = 512,\n  DENSITY_DISSIPATION = 3.5,\n  VELOCITY_DISSIPATION = 2,\n  PRESSURE = 0.1,\n  PRESSURE_ITERATIONS = 20,\n  CURL = 3,\n  SPLAT_RADIUS = 0.2,\n  SPLAT_FORCE = 6000,\n  SHADING = true,\n  COLOR_UPDATE_SPEED = 10,\n  BACK_COLOR = { r: 0.5, g: 0, b: 0 },\n  TRANSPARENT = true\n}: SplashCursorProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return; // Guard canvas early\n\n    // Pointer and config setup\n    let pointers: Pointer[] = [pointerPrototype()];\n\n    // All these are guaranteed numbers due to destructuring defaults\n    // So we cast them to remove TS warnings:\n    let config = {\n      SIM_RESOLUTION: SIM_RESOLUTION!,\n      DYE_RESOLUTION: DYE_RESOLUTION!,\n      CAPTURE_RESOLUTION: CAPTURE_RESOLUTION!,\n      DENSITY_DISSIPATION: DENSITY_DISSIPATION!,\n      VELOCITY_DISSIPATION: VELOCITY_DISSIPATION!,\n      PRESSURE: PRESSURE!,\n      PRESSURE_ITERATIONS: PRESSURE_ITERATIONS!,\n      CURL: CURL!,\n      SPLAT_RADIUS: SPLAT_RADIUS!,\n      SPLAT_FORCE: SPLAT_FORCE!,\n      SHADING,\n      COLOR_UPDATE_SPEED: COLOR_UPDATE_SPEED!,\n      PAUSED: false,\n      BACK_COLOR,\n      TRANSPARENT,\n    };\n\n    // Get WebGL context (WebGL1 or WebGL2)\n    const { gl, ext } = getWebGLContext(canvas);\n    if (!gl || !ext) return;\n\n    // If no linear filtering, reduce resolution\n    if (!ext.supportLinearFiltering) {\n      config.DYE_RESOLUTION = 256;\n      config.SHADING = false;\n    }\n\n    function getWebGLContext(canvas: HTMLCanvasElement) {\n      const params = {\n        alpha: true,\n        depth: false,\n        stencil: false,\n        antialias: false,\n        preserveDrawingBuffer: false,\n      };\n\n      let gl = canvas.getContext(\n        \"webgl2\",\n        params\n      ) as WebGL2RenderingContext | null;\n\n      if (!gl) {\n        gl = (canvas.getContext(\"webgl\", params) ||\n          canvas.getContext(\n            \"experimental-webgl\",\n            params\n          )) as WebGL2RenderingContext | null;\n      }\n\n      if (!gl) {\n        throw new Error(\"Unable to initialize WebGL.\");\n      }\n\n      const isWebGL2 = \"drawBuffers\" in gl;\n\n      let supportLinearFiltering = false;\n      let halfFloat = null;\n\n      if (isWebGL2) {\n        // For WebGL2\n        (gl as WebGL2RenderingContext).getExtension(\"EXT_color_buffer_float\");\n        supportLinearFiltering = !!(gl as WebGL2RenderingContext).getExtension(\n          \"OES_texture_float_linear\"\n        );\n      } else {\n        // For WebGL1\n        halfFloat = gl.getExtension(\"OES_texture_half_float\");\n        supportLinearFiltering = !!gl.getExtension(\n          \"OES_texture_half_float_linear\"\n        );\n      }\n\n      gl.clearColor(0, 0, 0, 1);\n\n      const halfFloatTexType = isWebGL2\n        ? (gl as WebGL2RenderingContext).HALF_FLOAT\n        : (halfFloat && (halfFloat as any).HALF_FLOAT_OES) || 0;\n\n      let formatRGBA: any;\n      let formatRG: any;\n      let formatR: any;\n\n      if (isWebGL2) {\n        formatRGBA = getSupportedFormat(\n          gl,\n          (gl as WebGL2RenderingContext).RGBA16F,\n          gl.RGBA,\n          halfFloatTexType\n        );\n        formatRG = getSupportedFormat(\n          gl,\n          (gl as WebGL2RenderingContext).RG16F,\n          (gl as WebGL2RenderingContext).RG,\n          halfFloatTexType\n        );\n        formatR = getSupportedFormat(\n          gl,\n          (gl as WebGL2RenderingContext).R16F,\n          (gl as WebGL2RenderingContext).RED,\n          halfFloatTexType\n        );\n      } else {\n        formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n        formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n        formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n      }\n\n      return {\n        gl,\n        ext: {\n          formatRGBA,\n          formatRG,\n          formatR,\n          halfFloatTexType,\n          supportLinearFiltering,\n        },\n      };\n    }\n\n    function getSupportedFormat(\n      gl: WebGLRenderingContext | WebGL2RenderingContext,\n      internalFormat: number,\n      format: number,\n      type: number\n    ): { internalFormat: number; format: number } | null {\n      if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n        // For WebGL2 fallback:\n        if (\"drawBuffers\" in gl) {\n          const gl2 = gl as WebGL2RenderingContext;\n          switch (internalFormat) {\n            case gl2.R16F:\n              return getSupportedFormat(gl2, gl2.RG16F, gl2.RG, type);\n            case gl2.RG16F:\n              return getSupportedFormat(gl2, gl2.RGBA16F, gl2.RGBA, type);\n            default:\n              return null;\n          }\n        }\n        return null;\n      }\n      return { internalFormat, format };\n    }\n\n    function supportRenderTextureFormat(\n      gl: WebGLRenderingContext | WebGL2RenderingContext,\n      internalFormat: number,\n      format: number,\n      type: number\n    ) {\n      const texture = gl.createTexture();\n      if (!texture) return false;\n\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        internalFormat,\n        4,\n        4,\n        0,\n        format,\n        type,\n        null\n      );\n\n      const fbo = gl.createFramebuffer();\n      if (!fbo) return false;\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        texture,\n        0\n      );\n      const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n      return status === gl.FRAMEBUFFER_COMPLETE;\n    }\n\n    function hashCode(s: string) {\n      if (!s.length) return 0;\n      let hash = 0;\n      for (let i = 0; i < s.length; i++) {\n        hash = (hash << 5) - hash + s.charCodeAt(i);\n        hash |= 0;\n      }\n      return hash;\n    }\n\n    function addKeywords(source: string, keywords: string[] | null) {\n      if (!keywords) return source;\n      let keywordsString = \"\";\n      for (const keyword of keywords) {\n        keywordsString += `#define ${keyword}\\n`;\n      }\n      return keywordsString + source;\n    }\n\n    function compileShader(\n      type: number,\n      source: string,\n      keywords: string[] | null = null\n    ): WebGLShader | null {\n      const shaderSource = addKeywords(source, keywords);\n      const shader = gl.createShader(type);\n      if (!shader) return null;\n      gl.shaderSource(shader, shaderSource);\n      gl.compileShader(shader);\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.trace(gl.getShaderInfoLog(shader));\n      }\n      return shader;\n    }\n\n    function createProgram(\n      vertexShader: WebGLShader | null,\n      fragmentShader: WebGLShader | null\n    ): WebGLProgram | null {\n      if (!vertexShader || !fragmentShader) return null;\n      const program = gl.createProgram();\n      if (!program) return null;\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.trace(gl.getProgramInfoLog(program));\n      }\n      return program;\n    }\n\n    function getUniforms(program: WebGLProgram) {\n      let uniforms: Record<string, WebGLUniformLocation | null> = {};\n      const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n      for (let i = 0; i < uniformCount; i++) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (uniformInfo) {\n          uniforms[uniformInfo.name] = gl.getUniformLocation(\n            program,\n            uniformInfo.name\n          );\n        }\n      }\n      return uniforms;\n    }\n\n    class Program {\n      program: WebGLProgram | null;\n      uniforms: Record<string, WebGLUniformLocation | null>;\n\n      constructor(\n        vertexShader: WebGLShader | null,\n        fragmentShader: WebGLShader | null\n      ) {\n        this.program = createProgram(vertexShader, fragmentShader);\n        this.uniforms = this.program ? getUniforms(this.program) : {};\n      }\n\n      bind() {\n        if (this.program) gl.useProgram(this.program);\n      }\n    }\n\n    class Material {\n      vertexShader: WebGLShader | null;\n      fragmentShaderSource: string;\n      programs: Record<number, WebGLProgram | null>;\n      activeProgram: WebGLProgram | null;\n      uniforms: Record<string, WebGLUniformLocation | null>;\n\n      constructor(\n        vertexShader: WebGLShader | null,\n        fragmentShaderSource: string\n      ) {\n        this.vertexShader = vertexShader;\n        this.fragmentShaderSource = fragmentShaderSource;\n        this.programs = {};\n        this.activeProgram = null;\n        this.uniforms = {};\n      }\n\n      setKeywords(keywords: string[]) {\n        let hash = 0;\n        for (const kw of keywords) {\n          hash += hashCode(kw);\n        }\n        let program = this.programs[hash];\n        if (program == null) {\n          const fragmentShader = compileShader(\n            gl.FRAGMENT_SHADER,\n            this.fragmentShaderSource,\n            keywords\n          );\n          program = createProgram(this.vertexShader, fragmentShader);\n          this.programs[hash] = program;\n        }\n        if (program === this.activeProgram) return;\n        if (program) {\n          this.uniforms = getUniforms(program);\n        }\n        this.activeProgram = program;\n      }\n\n      bind() {\n        if (this.activeProgram) {\n          gl.useProgram(this.activeProgram);\n        }\n      }\n    }\n\n    // -------------------- Shaders --------------------\n    const baseVertexShader = compileShader(\n      gl.VERTEX_SHADER,\n      `\n      precision highp float;\n      attribute vec2 aPosition;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform vec2 texelSize;\n\n      void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n      }\n    `\n    );\n\n    const copyShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      uniform sampler2D uTexture;\n\n      void main () {\n          gl_FragColor = texture2D(uTexture, vUv);\n      }\n    `\n    );\n\n    const clearShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      uniform sampler2D uTexture;\n      uniform float value;\n\n      void main () {\n          gl_FragColor = value * texture2D(uTexture, vUv);\n      }\n    `\n    );\n\n    const displayShaderSource = `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uTexture;\n      uniform sampler2D uDithering;\n      uniform vec2 ditherScale;\n      uniform vec2 texelSize;\n\n      vec3 linearToGamma (vec3 color) {\n          color = max(color, vec3(0));\n          return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n      }\n\n      void main () {\n          vec3 c = texture2D(uTexture, vUv).rgb;\n          #ifdef SHADING\n              vec3 lc = texture2D(uTexture, vL).rgb;\n              vec3 rc = texture2D(uTexture, vR).rgb;\n              vec3 tc = texture2D(uTexture, vT).rgb;\n              vec3 bc = texture2D(uTexture, vB).rgb;\n\n              float dx = length(rc) - length(lc);\n              float dy = length(tc) - length(bc);\n\n              vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n              vec3 l = vec3(0.0, 0.0, 1.0);\n\n              float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n              c *= diffuse;\n          #endif\n\n          float a = max(c.r, max(c.g, c.b));\n          gl_FragColor = vec4(c, a);\n      }\n    `;\n\n    const splatShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uTarget;\n      uniform float aspectRatio;\n      uniform vec3 color;\n      uniform vec2 point;\n      uniform float radius;\n\n      void main () {\n          vec2 p = vUv - point.xy;\n          p.x *= aspectRatio;\n          vec3 splat = exp(-dot(p, p) / radius) * color;\n          vec3 base = texture2D(uTarget, vUv).xyz;\n          gl_FragColor = vec4(base + splat, 1.0);\n      }\n    `\n    );\n\n    const advectionShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      uniform sampler2D uVelocity;\n      uniform sampler2D uSource;\n      uniform vec2 texelSize;\n      uniform vec2 dyeTexelSize;\n      uniform float dt;\n      uniform float dissipation;\n\n      vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n          vec2 st = uv / tsize - 0.5;\n          vec2 iuv = floor(st);\n          vec2 fuv = fract(st);\n\n          vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n          vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n          vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n          vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n          return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n      }\n\n      void main () {\n          #ifdef MANUAL_FILTERING\n              vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n              vec4 result = bilerp(uSource, coord, dyeTexelSize);\n          #else\n              vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n              vec4 result = texture2D(uSource, coord);\n          #endif\n          float decay = 1.0 + dissipation * dt;\n          gl_FragColor = result / decay;\n      }\n    `,\n      ext.supportLinearFiltering ? null : [\"MANUAL_FILTERING\"]\n    );\n\n    const divergenceShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uVelocity;\n\n      void main () {\n          float L = texture2D(uVelocity, vL).x;\n          float R = texture2D(uVelocity, vR).x;\n          float T = texture2D(uVelocity, vT).y;\n          float B = texture2D(uVelocity, vB).y;\n\n          vec2 C = texture2D(uVelocity, vUv).xy;\n          if (vL.x < 0.0) { L = -C.x; }\n          if (vR.x > 1.0) { R = -C.x; }\n          if (vT.y > 1.0) { T = -C.y; }\n          if (vB.y < 0.0) { B = -C.y; }\n\n          float div = 0.5 * (R - L + T - B);\n          gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n      }\n    `\n    );\n\n    const curlShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uVelocity;\n\n      void main () {\n          float L = texture2D(uVelocity, vL).y;\n          float R = texture2D(uVelocity, vR).y;\n          float T = texture2D(uVelocity, vT).x;\n          float B = texture2D(uVelocity, vB).x;\n          float vorticity = R - L - T + B;\n          gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n      }\n    `\n    );\n\n    const vorticityShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision highp float;\n      precision highp sampler2D;\n      varying vec2 vUv;\n      varying vec2 vL;\n      varying vec2 vR;\n      varying vec2 vT;\n      varying vec2 vB;\n      uniform sampler2D uVelocity;\n      uniform sampler2D uCurl;\n      uniform float curl;\n      uniform float dt;\n\n      void main () {\n          float L = texture2D(uCurl, vL).x;\n          float R = texture2D(uCurl, vR).x;\n          float T = texture2D(uCurl, vT).x;\n          float B = texture2D(uCurl, vB).x;\n          float C = texture2D(uCurl, vUv).x;\n\n          vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n          force /= length(force) + 0.0001;\n          force *= curl * C;\n          force.y *= -1.0;\n\n          vec2 velocity = texture2D(uVelocity, vUv).xy;\n          velocity += force * dt;\n          velocity = min(max(velocity, -1000.0), 1000.0);\n          gl_FragColor = vec4(velocity, 0.0, 1.0);\n      }\n    `\n    );\n\n    const pressureShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uPressure;\n      uniform sampler2D uDivergence;\n\n      void main () {\n          float L = texture2D(uPressure, vL).x;\n          float R = texture2D(uPressure, vR).x;\n          float T = texture2D(uPressure, vT).x;\n          float B = texture2D(uPressure, vB).x;\n          float C = texture2D(uPressure, vUv).x;\n          float divergence = texture2D(uDivergence, vUv).x;\n          float pressure = (L + R + B + T - divergence) * 0.25;\n          gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n      }\n    `\n    );\n\n    const gradientSubtractShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n      precision mediump sampler2D;\n      varying highp vec2 vUv;\n      varying highp vec2 vL;\n      varying highp vec2 vR;\n      varying highp vec2 vT;\n      varying highp vec2 vB;\n      uniform sampler2D uPressure;\n      uniform sampler2D uVelocity;\n\n      void main () {\n          float L = texture2D(uPressure, vL).x;\n          float R = texture2D(uPressure, vR).x;\n          float T = texture2D(uPressure, vT).x;\n          float B = texture2D(uPressure, vB).x;\n          vec2 velocity = texture2D(uVelocity, vUv).xy;\n          velocity.xy -= vec2(R - L, T - B);\n          gl_FragColor = vec4(velocity, 0.0, 1.0);\n      }\n    `\n    );\n\n    // -------------------- Fullscreen Triangles --------------------\n    const blit = (() => {\n      const buffer = gl.createBuffer()!;\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(\n        gl.ARRAY_BUFFER,\n        new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),\n        gl.STATIC_DRAW\n      );\n      const elemBuffer = gl.createBuffer()!;\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elemBuffer);\n      gl.bufferData(\n        gl.ELEMENT_ARRAY_BUFFER,\n        new Uint16Array([0, 1, 2, 0, 2, 3]),\n        gl.STATIC_DRAW\n      );\n      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n      gl.enableVertexAttribArray(0);\n\n      return (target: FBO | null, doClear = false) => {\n        if (!gl) return;\n        if (!target) {\n          gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n          gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        } else {\n          gl.viewport(0, 0, target.width, target.height);\n          gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo);\n        }\n        if (doClear) {\n          gl.clearColor(0, 0, 0, 1);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n      };\n    })();\n\n    // Types for Framebuffers\n    interface FBO {\n      texture: WebGLTexture;\n      fbo: WebGLFramebuffer;\n      width: number;\n      height: number;\n      texelSizeX: number;\n      texelSizeY: number;\n      attach: (id: number) => number;\n    }\n\n    interface DoubleFBO {\n      width: number;\n      height: number;\n      texelSizeX: number;\n      texelSizeY: number;\n      read: FBO;\n      write: FBO;\n      swap: () => void;\n    }\n\n    // FBO variables\n    let dye: DoubleFBO;\n    let velocity: DoubleFBO;\n    let divergence: FBO;\n    let curl: FBO;\n    let pressure: DoubleFBO;\n\n    // WebGL Programs\n    const copyProgram = new Program(baseVertexShader, copyShader);\n    const clearProgram = new Program(baseVertexShader, clearShader);\n    const splatProgram = new Program(baseVertexShader, splatShader);\n    const advectionProgram = new Program(baseVertexShader, advectionShader);\n    const divergenceProgram = new Program(baseVertexShader, divergenceShader);\n    const curlProgram = new Program(baseVertexShader, curlShader);\n    const vorticityProgram = new Program(baseVertexShader, vorticityShader);\n    const pressureProgram = new Program(baseVertexShader, pressureShader);\n    const gradienSubtractProgram = new Program(\n      baseVertexShader,\n      gradientSubtractShader\n    );\n    const displayMaterial = new Material(baseVertexShader, displayShaderSource);\n\n    // -------------------- FBO creation --------------------\n    function createFBO(\n      w: number,\n      h: number,\n      internalFormat: number,\n      format: number,\n      type: number,\n      param: number\n    ): FBO {\n      gl.activeTexture(gl.TEXTURE0);\n      const texture = gl.createTexture()!;\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        internalFormat,\n        w,\n        h,\n        0,\n        format,\n        type,\n        null\n      );\n      const fbo = gl.createFramebuffer()!;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        texture,\n        0\n      );\n      gl.viewport(0, 0, w, h);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      const texelSizeX = 1 / w;\n      const texelSizeY = 1 / h;\n\n      return {\n        texture,\n        fbo,\n        width: w,\n        height: h,\n        texelSizeX,\n        texelSizeY,\n        attach(id: number) {\n          gl.activeTexture(gl.TEXTURE0 + id);\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          return id;\n        },\n      };\n    }\n\n    function createDoubleFBO(\n      w: number,\n      h: number,\n      internalFormat: number,\n      format: number,\n      type: number,\n      param: number\n    ): DoubleFBO {\n      const fbo1 = createFBO(w, h, internalFormat, format, type, param);\n      const fbo2 = createFBO(w, h, internalFormat, format, type, param);\n      return {\n        width: w,\n        height: h,\n        texelSizeX: fbo1.texelSizeX,\n        texelSizeY: fbo1.texelSizeY,\n        read: fbo1,\n        write: fbo2,\n        swap() {\n          const tmp = this.read;\n          this.read = this.write;\n          this.write = tmp;\n        },\n      };\n    }\n\n    function resizeFBO(\n      target: FBO,\n      w: number,\n      h: number,\n      internalFormat: number,\n      format: number,\n      type: number,\n      param: number\n    ) {\n      const newFBO = createFBO(w, h, internalFormat, format, type, param);\n      copyProgram.bind();\n      if (copyProgram.uniforms.uTexture)\n        gl.uniform1i(copyProgram.uniforms.uTexture, target.attach(0));\n      blit(newFBO, false);\n      return newFBO;\n    }\n\n    function resizeDoubleFBO(\n      target: DoubleFBO,\n      w: number,\n      h: number,\n      internalFormat: number,\n      format: number,\n      type: number,\n      param: number\n    ) {\n      if (target.width === w && target.height === h) return target;\n      target.read = resizeFBO(\n        target.read,\n        w,\n        h,\n        internalFormat,\n        format,\n        type,\n        param\n      );\n      target.write = createFBO(w, h, internalFormat, format, type, param);\n      target.width = w;\n      target.height = h;\n      target.texelSizeX = 1 / w;\n      target.texelSizeY = 1 / h;\n      return target;\n    }\n\n    function initFramebuffers() {\n      const simRes = getResolution(config.SIM_RESOLUTION!);\n      const dyeRes = getResolution(config.DYE_RESOLUTION!);\n\n      const texType = ext.halfFloatTexType;\n      const rgba = ext.formatRGBA;\n      const rg = ext.formatRG;\n      const r = ext.formatR;\n      const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n      gl.disable(gl.BLEND);\n\n      if (!dye) {\n        dye = createDoubleFBO(\n          dyeRes.width,\n          dyeRes.height,\n          rgba.internalFormat,\n          rgba.format,\n          texType,\n          filtering\n        );\n      } else {\n        dye = resizeDoubleFBO(\n          dye,\n          dyeRes.width,\n          dyeRes.height,\n          rgba.internalFormat,\n          rgba.format,\n          texType,\n          filtering\n        );\n      }\n\n      if (!velocity) {\n        velocity = createDoubleFBO(\n          simRes.width,\n          simRes.height,\n          rg.internalFormat,\n          rg.format,\n          texType,\n          filtering\n        );\n      } else {\n        velocity = resizeDoubleFBO(\n          velocity,\n          simRes.width,\n          simRes.height,\n          rg.internalFormat,\n          rg.format,\n          texType,\n          filtering\n        );\n      }\n\n      divergence = createFBO(\n        simRes.width,\n        simRes.height,\n        r.internalFormat,\n        r.format,\n        texType,\n        gl.NEAREST\n      );\n      curl = createFBO(\n        simRes.width,\n        simRes.height,\n        r.internalFormat,\n        r.format,\n        texType,\n        gl.NEAREST\n      );\n      pressure = createDoubleFBO(\n        simRes.width,\n        simRes.height,\n        r.internalFormat,\n        r.format,\n        texType,\n        gl.NEAREST\n      );\n    }\n\n    function updateKeywords() {\n      const displayKeywords: string[] = [];\n      if (config.SHADING) displayKeywords.push(\"SHADING\");\n      displayMaterial.setKeywords(displayKeywords);\n    }\n\n    function getResolution(resolution: number) {\n      const w = gl.drawingBufferWidth;\n      const h = gl.drawingBufferHeight;\n      const aspectRatio = w / h;\n      let aspect = aspectRatio < 1 ? 1 / aspectRatio : aspectRatio;\n      const min = Math.round(resolution);\n      const max = Math.round(resolution * aspect);\n      if (w > h) {\n        return { width: max, height: min };\n      }\n      return { width: min, height: max };\n    }\n\n    function scaleByPixelRatio(input: number) {\n      const pixelRatio = window.devicePixelRatio || 1;\n      return Math.floor(input * pixelRatio);\n    }\n\n    // -------------------- Simulation Setup --------------------\n    updateKeywords();\n    initFramebuffers();\n\n    let lastUpdateTime = Date.now();\n    let colorUpdateTimer = 0.0;\n\n    function updateFrame() {\n      const dt = calcDeltaTime();\n      if (resizeCanvas()) initFramebuffers();\n      updateColors(dt);\n      applyInputs();\n      step(dt);\n      render(null);\n      requestAnimationFrame(updateFrame);\n    }\n\n    function calcDeltaTime() {\n      const now = Date.now();\n      let dt = (now - lastUpdateTime) / 1000;\n      dt = Math.min(dt, 0.016666);\n      lastUpdateTime = now;\n      return dt;\n    }\n\n    function resizeCanvas() {\n      const width = scaleByPixelRatio(canvas!.clientWidth);\n      const height = scaleByPixelRatio(canvas!.clientHeight);\n      if (canvas!.width !== width || canvas!.height !== height) {\n        canvas!.width = width;\n        canvas!.height = height;\n        return true;\n      }\n      return false;\n    }\n\n    function updateColors(dt: number) {\n      colorUpdateTimer += dt * config.COLOR_UPDATE_SPEED;\n      if (colorUpdateTimer >= 1) {\n        colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);\n        pointers.forEach((p) => {\n          p.color = generateColor();\n        });\n      }\n    }\n\n    function applyInputs() {\n      for (const p of pointers) {\n        if (p.moved) {\n          p.moved = false;\n          splatPointer(p);\n        }\n      }\n    }\n\n    function step(dt: number) {\n      gl.disable(gl.BLEND);\n\n      // Curl\n      curlProgram.bind();\n      if (curlProgram.uniforms.texelSize) {\n        gl.uniform2f(\n          curlProgram.uniforms.texelSize,\n          velocity.texelSizeX,\n          velocity.texelSizeY\n        );\n      }\n      if (curlProgram.uniforms.uVelocity) {\n        gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0));\n      }\n      blit(curl);\n\n      // Vorticity\n      vorticityProgram.bind();\n      if (vorticityProgram.uniforms.texelSize) {\n        gl.uniform2f(\n          vorticityProgram.uniforms.texelSize,\n          velocity.texelSizeX,\n          velocity.texelSizeY\n        );\n      }\n      if (vorticityProgram.uniforms.uVelocity) {\n        gl.uniform1i(\n          vorticityProgram.uniforms.uVelocity,\n          velocity.read.attach(0)\n        );\n      }\n      if (vorticityProgram.uniforms.uCurl) {\n        gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));\n      }\n      if (vorticityProgram.uniforms.curl) {\n        gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\n      }\n      if (vorticityProgram.uniforms.dt) {\n        gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n      }\n      blit(velocity.write);\n      velocity.swap();\n\n      // Divergence\n      divergenceProgram.bind();\n      if (divergenceProgram.uniforms.texelSize) {\n        gl.uniform2f(\n          divergenceProgram.uniforms.texelSize,\n          velocity.texelSizeX,\n          velocity.texelSizeY\n        );\n      }\n      if (divergenceProgram.uniforms.uVelocity) {\n        gl.uniform1i(\n          divergenceProgram.uniforms.uVelocity,\n          velocity.read.attach(0)\n        );\n      }\n      blit(divergence);\n\n      // Clear pressure\n      clearProgram.bind();\n      if (clearProgram.uniforms.uTexture) {\n        gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0));\n      }\n      if (clearProgram.uniforms.value) {\n        gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE);\n      }\n      blit(pressure.write);\n      pressure.swap();\n\n      // Pressure\n      pressureProgram.bind();\n      if (pressureProgram.uniforms.texelSize) {\n        gl.uniform2f(\n          pressureProgram.uniforms.texelSize,\n          velocity.texelSizeX,\n          velocity.texelSizeY\n        );\n      }\n      if (pressureProgram.uniforms.uDivergence) {\n        gl.uniform1i(\n          pressureProgram.uniforms.uDivergence,\n          divergence.attach(0)\n        );\n      }\n      for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\n        if (pressureProgram.uniforms.uPressure) {\n          gl.uniform1i(\n            pressureProgram.uniforms.uPressure,\n            pressure.read.attach(1)\n          );\n        }\n        blit(pressure.write);\n        pressure.swap();\n      }\n\n      // Gradient Subtract\n      gradienSubtractProgram.bind();\n      if (gradienSubtractProgram.uniforms.texelSize) {\n        gl.uniform2f(\n          gradienSubtractProgram.uniforms.texelSize,\n          velocity.texelSizeX,\n          velocity.texelSizeY\n        );\n      }\n      if (gradienSubtractProgram.uniforms.uPressure) {\n        gl.uniform1i(\n          gradienSubtractProgram.uniforms.uPressure,\n          pressure.read.attach(0)\n        );\n      }\n      if (gradienSubtractProgram.uniforms.uVelocity) {\n        gl.uniform1i(\n          gradienSubtractProgram.uniforms.uVelocity,\n          velocity.read.attach(1)\n        );\n      }\n      blit(velocity.write);\n      velocity.swap();\n\n      // Advection - velocity\n      advectionProgram.bind();\n      if (advectionProgram.uniforms.texelSize) {\n        gl.uniform2f(\n          advectionProgram.uniforms.texelSize,\n          velocity.texelSizeX,\n          velocity.texelSizeY\n        );\n      }\n      if (\n        !ext.supportLinearFiltering &&\n        advectionProgram.uniforms.dyeTexelSize\n      ) {\n        gl.uniform2f(\n          advectionProgram.uniforms.dyeTexelSize,\n          velocity.texelSizeX,\n          velocity.texelSizeY\n        );\n      }\n      const velocityId = velocity.read.attach(0);\n      if (advectionProgram.uniforms.uVelocity) {\n        gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\n      }\n      if (advectionProgram.uniforms.uSource) {\n        gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\n      }\n      if (advectionProgram.uniforms.dt) {\n        gl.uniform1f(advectionProgram.uniforms.dt, dt);\n      }\n      if (advectionProgram.uniforms.dissipation) {\n        gl.uniform1f(\n          advectionProgram.uniforms.dissipation,\n          config.VELOCITY_DISSIPATION\n        );\n      }\n      blit(velocity.write);\n      velocity.swap();\n\n      // Advection - dye\n      if (\n        !ext.supportLinearFiltering &&\n        advectionProgram.uniforms.dyeTexelSize\n      ) {\n        gl.uniform2f(\n          advectionProgram.uniforms.dyeTexelSize,\n          dye.texelSizeX,\n          dye.texelSizeY\n        );\n      }\n      if (advectionProgram.uniforms.uVelocity) {\n        gl.uniform1i(\n          advectionProgram.uniforms.uVelocity,\n          velocity.read.attach(0)\n        );\n      }\n      if (advectionProgram.uniforms.uSource) {\n        gl.uniform1i(advectionProgram.uniforms.uSource, dye.read.attach(1));\n      }\n      if (advectionProgram.uniforms.dissipation) {\n        gl.uniform1f(\n          advectionProgram.uniforms.dissipation,\n          config.DENSITY_DISSIPATION\n        );\n      }\n      blit(dye.write);\n      dye.swap();\n    }\n\n    function render(target: FBO | null) {\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      gl.enable(gl.BLEND);\n      drawDisplay(target);\n    }\n\n    function drawDisplay(target: FBO | null) {\n      const width = target ? target.width : gl.drawingBufferWidth;\n      const height = target ? target.height : gl.drawingBufferHeight;\n      displayMaterial.bind();\n      if (config.SHADING && displayMaterial.uniforms.texelSize) {\n        gl.uniform2f(displayMaterial.uniforms.texelSize, 1 / width, 1 / height);\n      }\n      if (displayMaterial.uniforms.uTexture) {\n        gl.uniform1i(displayMaterial.uniforms.uTexture, dye.read.attach(0));\n      }\n      blit(target, false);\n    }\n\n    // -------------------- Interaction --------------------\n    function splatPointer(pointer: Pointer) {\n      const dx = pointer.deltaX * config.SPLAT_FORCE;\n      const dy = pointer.deltaY * config.SPLAT_FORCE;\n      splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\n    }\n\n    function clickSplat(pointer: Pointer) {\n      const color = generateColor();\n      color.r *= 10;\n      color.g *= 10;\n      color.b *= 10;\n      const dx = 10 * (Math.random() - 0.5);\n      const dy = 30 * (Math.random() - 0.5);\n      splat(pointer.texcoordX, pointer.texcoordY, dx, dy, color);\n    }\n\n    function splat(\n      x: number,\n      y: number,\n      dx: number,\n      dy: number,\n      color: ColorRGB\n    ) {\n      splatProgram.bind();\n      if (splatProgram.uniforms.uTarget) {\n        gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0));\n      }\n      if (splatProgram.uniforms.aspectRatio) {\n        gl.uniform1f(\n          splatProgram.uniforms.aspectRatio,\n          canvas!.width / canvas!.height\n        );\n      }\n      if (splatProgram.uniforms.point) {\n        gl.uniform2f(splatProgram.uniforms.point, x, y);\n      }\n      if (splatProgram.uniforms.color) {\n        gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0);\n      }\n      if (splatProgram.uniforms.radius) {\n        gl.uniform1f(\n          splatProgram.uniforms.radius,\n          correctRadius(config.SPLAT_RADIUS / 100)!\n        );\n      }\n      blit(velocity.write);\n      velocity.swap();\n\n      if (splatProgram.uniforms.uTarget) {\n        gl.uniform1i(splatProgram.uniforms.uTarget, dye.read.attach(0));\n      }\n      if (splatProgram.uniforms.color) {\n        gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\n      }\n      blit(dye.write);\n      dye.swap();\n    }\n\n    function correctRadius(radius: number) {\n      // Use non-null assertion (canvas can't be null here)\n      const aspectRatio = canvas!.width / canvas!.height;\n      if (aspectRatio > 1) radius *= aspectRatio;\n      return radius;\n    }\n\n    function updatePointerDownData(\n      pointer: Pointer,\n      id: number,\n      posX: number,\n      posY: number\n    ) {\n      pointer.id = id;\n      pointer.down = true;\n      pointer.moved = false;\n      pointer.texcoordX = posX / canvas!.width;\n      pointer.texcoordY = 1 - posY / canvas!.height;\n      pointer.prevTexcoordX = pointer.texcoordX;\n      pointer.prevTexcoordY = pointer.texcoordY;\n      pointer.deltaX = 0;\n      pointer.deltaY = 0;\n      pointer.color = generateColor();\n    }\n\n    function updatePointerMoveData(\n      pointer: Pointer,\n      posX: number,\n      posY: number,\n      color: ColorRGB\n    ) {\n      pointer.prevTexcoordX = pointer.texcoordX;\n      pointer.prevTexcoordY = pointer.texcoordY;\n      pointer.texcoordX = posX / canvas!.width;\n      pointer.texcoordY = 1 - posY / canvas!.height;\n      pointer.deltaX = correctDeltaX(\n        pointer.texcoordX - pointer.prevTexcoordX\n      )!;\n      pointer.deltaY = correctDeltaY(\n        pointer.texcoordY - pointer.prevTexcoordY\n      )!;\n      pointer.moved =\n        Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\n      pointer.color = color;\n    }\n\n    function updatePointerUpData(pointer: Pointer) {\n      pointer.down = false;\n    }\n\n    function correctDeltaX(delta: number) {\n      const aspectRatio = canvas!.width / canvas!.height;\n      if (aspectRatio < 1) delta *= aspectRatio;\n      return delta;\n    }\n\n    function correctDeltaY(delta: number) {\n      const aspectRatio = canvas!.width / canvas!.height;\n      if (aspectRatio > 1) delta /= aspectRatio;\n      return delta;\n    }\n\n    function generateColor(): ColorRGB {\n      const c = HSVtoRGB(Math.random(), 1.0, 1.0);\n      c.r *= 0.15;\n      c.g *= 0.15;\n      c.b *= 0.15;\n      return c;\n    }\n\n    function HSVtoRGB(h: number, s: number, v: number): ColorRGB {\n      let r = 0,\n        g = 0,\n        b = 0;\n      const i = Math.floor(h * 6);\n      const f = h * 6 - i;\n      const p = v * (1 - s);\n      const q = v * (1 - f * s);\n      const t = v * (1 - (1 - f) * s);\n\n      switch (i % 6) {\n        case 0:\n          r = v;\n          g = t;\n          b = p;\n          break;\n        case 1:\n          r = q;\n          g = v;\n          b = p;\n          break;\n        case 2:\n          r = p;\n          g = v;\n          b = t;\n          break;\n        case 3:\n          r = p;\n          g = q;\n          b = v;\n          break;\n        case 4:\n          r = t;\n          g = p;\n          b = v;\n          break;\n        case 5:\n          r = v;\n          g = p;\n          b = q;\n          break;\n      }\n      return { r, g, b };\n    }\n\n    function wrap(value: number, min: number, max: number) {\n      const range = max - min;\n      if (range === 0) return min;\n      return ((value - min) % range) + min;\n    }\n\n    // -------------------- Event Listeners --------------------\n    window.addEventListener(\"mousedown\", (e) => {\n      const pointer = pointers[0];\n      const posX = scaleByPixelRatio(e.clientX);\n      const posY = scaleByPixelRatio(e.clientY);\n      updatePointerDownData(pointer, -1, posX, posY);\n      clickSplat(pointer);\n    });\n\n    // Start rendering on first mouse move\n    function handleFirstMouseMove(e: MouseEvent) {\n      const pointer = pointers[0];\n      const posX = scaleByPixelRatio(e.clientX);\n      const posY = scaleByPixelRatio(e.clientY);\n      const color = generateColor();\n      updateFrame();\n      updatePointerMoveData(pointer, posX, posY, color);\n      document.body.removeEventListener(\"mousemove\", handleFirstMouseMove);\n    }\n    document.body.addEventListener(\"mousemove\", handleFirstMouseMove);\n\n    window.addEventListener(\"mousemove\", (e) => {\n      const pointer = pointers[0];\n      const posX = scaleByPixelRatio(e.clientX);\n      const posY = scaleByPixelRatio(e.clientY);\n      const color = pointer.color;\n      updatePointerMoveData(pointer, posX, posY, color);\n    });\n\n    // Start rendering on first touch\n    function handleFirstTouchStart(e: TouchEvent) {\n      const touches = e.targetTouches;\n      const pointer = pointers[0];\n      for (let i = 0; i < touches.length; i++) {\n        const posX = scaleByPixelRatio(touches[i].clientX);\n        const posY = scaleByPixelRatio(touches[i].clientY);\n        updateFrame();\n        updatePointerDownData(pointer, touches[i].identifier, posX, posY);\n      }\n      document.body.removeEventListener(\"touchstart\", handleFirstTouchStart);\n    }\n    document.body.addEventListener(\"touchstart\", handleFirstTouchStart);\n\n    window.addEventListener(\n      \"touchstart\",\n      (e) => {\n        const touches = e.targetTouches;\n        const pointer = pointers[0];\n        for (let i = 0; i < touches.length; i++) {\n          const posX = scaleByPixelRatio(touches[i].clientX);\n          const posY = scaleByPixelRatio(touches[i].clientY);\n          updatePointerDownData(pointer, touches[i].identifier, posX, posY);\n        }\n      },\n      false\n    );\n\n    window.addEventListener(\n      \"touchmove\",\n      (e) => {\n        const touches = e.targetTouches;\n        const pointer = pointers[0];\n        for (let i = 0; i < touches.length; i++) {\n          const posX = scaleByPixelRatio(touches[i].clientX);\n          const posY = scaleByPixelRatio(touches[i].clientY);\n          updatePointerMoveData(pointer, posX, posY, pointer.color);\n        }\n      },\n      false\n    );\n\n    window.addEventListener(\"touchend\", (e) => {\n      const touches = e.changedTouches;\n      const pointer = pointers[0];\n      for (let i = 0; i < touches.length; i++) {\n        updatePointerUpData(pointer);\n      }\n    });\n    // ------------------------------------------------------------\n  }, [\n    SIM_RESOLUTION,\n    DYE_RESOLUTION,\n    CAPTURE_RESOLUTION,\n    DENSITY_DISSIPATION,\n    VELOCITY_DISSIPATION,\n    PRESSURE,\n    PRESSURE_ITERATIONS,\n    CURL,\n    SPLAT_RADIUS,\n    SPLAT_FORCE,\n    SHADING,\n    COLOR_UPDATE_SPEED,\n    BACK_COLOR,\n    TRANSPARENT,\n  ]);\n\n  return (\n    <div className=\"fixed top-0 left-0 z-50 pointer-events-none w-full h-full\">\n      <canvas ref={canvasRef} id=\"fluid\" className=\"w-screen h-screen block\"></canvas>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}